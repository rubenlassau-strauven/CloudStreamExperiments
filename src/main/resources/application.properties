server.port=8000
#logging.level.org.springframework.cloud.stream=DEBUG

# -----------------Producer--------------------
# More info on producer properties:
# https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#_rabbit_producer_properties

# Topic (exchange)
spring.cloud.stream.bindings.stringOutput.destination= testExchange

# Queue (queue name will be topic.group => test.string)
spring.cloud.stream.bindings.stringOutput.group= stringQueue

# Key that binds the queue (string) to the exchange.
# When the exchange receives a message with the routing key 'string', it knows which queue to send it to
spring.cloud.stream.rabbit.bindings.stringOutput.producer.binding-routing-key= string

# Routing key to use when sending messages using the 'output' binding.
# These messages will have the routing key 'string'
# This can be a simple string (like is done here) or a header of which the name must be specified here.
# The value of that header will be used as the routing key
spring.cloud.stream.rabbit.bindings.stringOutput.producer.routing-key-expression='string'
# ---------------------------------------------

# -----------------Producer processed one--------------------
spring.cloud.stream.bindings.stringOutputProcessedOne.destination= testExchange
spring.cloud.stream.bindings.stringOutputProcessedOne.group= stringQueueProcessedOne
spring.cloud.stream.rabbit.bindings.stringOutputProcessedOne.producer.binding-routing-key= stringProcessedOne
spring.cloud.stream.rabbit.bindings.stringOutputProcessedOne.producer.routing-key-expression='stringProcessedOne'
# ---------------------------------------------

# -----------------Producer processed two--------------------
spring.cloud.stream.bindings.stringOutputProcessedTwo.destination= testExchange
spring.cloud.stream.bindings.stringOutputProcessedTwo.group= stringQueueProcessedTwo
spring.cloud.stream.rabbit.bindings.stringOutputProcessedTwo.producer.binding-routing-key= stringProcessedTwo
spring.cloud.stream.rabbit.bindings.stringOutputProcessedTwo.producer.routing-key-expression='stringProcessedTwo'
# ---------------------------------------------

# -----------------Consumer--------------------
spring.cloud.stream.bindings.stringInput.destination= testExchange
spring.cloud.stream.bindings.stringInput.group= stringQueue
spring.cloud.stream.rabbit.bindings.stringInput.consumer.binding-routing-key= string
# ---------------------------------------------


# -----------------Consumer processed one--------------------
# More info on consumer properties:
# https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/#_rabbitmq_consumer_properties

# Topic (exchange) to listen on
spring.cloud.stream.bindings.stringInputProcessedOne.destination= testExchange

# Queue to listen on
spring.cloud.stream.bindings.stringInputProcessedOne.group= stringQueueProcessedOne

# Only listen for messages which have this routing key
spring.cloud.stream.rabbit.bindings.stringInputProcessedOne.consumer.binding-routing-key= stringProcessedOne

# Automatically declare a DLQ
spring.cloud.stream.rabbit.bindings.stringInputProcessedOne.consumer.auto-bind-dlq=true

# After a message has failed after a set number of retries, it will be published to the DLQ
spring.cloud.stream.rabbit.bindings.stringInputProcessedOne.consumer.republish-to-dlq=true

# A message should be retried 5 times
spring.cloud.stream.bindings.stringInputProcessedOne.consumer.max-attempts=5

# Initial delay for retrying a message in milliseconds
spring.cloud.stream.bindings.stringInputProcessedOne.consumer.back-off-initial-interval=10000

# Multiply the initial delay by this value on every retry
spring.cloud.stream.bindings.stringInputProcessedOne.consumer.back-off-multiplier=3

# Maximum delay in milliseconds
spring.cloud.stream.bindings.stringInputProcessedOne.consumer.back-off-max-interval=3600000

# Number of concurrent consumer threads
# Note that a thread is blocked when a message is retried with a preset delay
spring.cloud.stream.bindings.stringInputProcessedOne.consumer.concurrency=5
# ---------------------------------------------

# -----------------Consumer processed two--------------------
spring.cloud.stream.bindings.stringInputProcessedTwo.destination= testExchange
spring.cloud.stream.bindings.stringInputProcessedTwo.group= stringQueueProcessedTwo
spring.cloud.stream.rabbit.bindings.stringInputProcessedTwo.consumer.binding-routing-key= stringProcessedTwo
spring.cloud.stream.rabbit.bindings.stringInputProcessedTwo.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.stringInputProcessedTwo.consumer.republish-to-dlq=true
spring.cloud.stream.bindings.stringInputProcessedTwo.consumer.max-attempts=5
spring.cloud.stream.bindings.stringInputProcessedTwo.consumer.back-off-initial-interval=10000
spring.cloud.stream.bindings.stringInputProcessedTwo.consumer.back-off-multiplier=3
spring.cloud.stream.bindings.stringInputProcessedTwo.consumer.back-off-max-interval=3600000
spring.cloud.stream.bindings.stringInputProcessedTwo.consumer.concurrency=5
# ---------------------------------------------

spring.cloud.stream.bindings.integerOutput.destination= testExchange
spring.cloud.stream.bindings.integerOutput.group= integerQueue
spring.cloud.stream.rabbit.bindings.integerOutput.producer.binding-routing-key= integer
spring.cloud.stream.rabbit.bindings.integerOutput.producer.routing-key-expression='integer'

spring.cloud.stream.bindings.integerInput.destination= testExchange
spring.cloud.stream.bindings.integerInput.group= integerQueue
spring.cloud.stream.rabbit.bindings.integerInput.consumer.binding-routing-key=integer
spring.cloud.stream.rabbit.bindings.integerInput.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.integerInput.consumer.republish-to-dlq=true
spring.cloud.stream.bindings.integerInput.consumer.max-attempts=5
spring.cloud.stream.bindings.integerInput.consumer.back-off-initial-interval=10000
spring.cloud.stream.bindings.integerInput.consumer.back-off-multiplier=3
spring.cloud.stream.bindings.integerInput.consumer.back-off-max-interval=3600000
spring.cloud.stream.bindings.integerInput.consumer.concurrency=5

